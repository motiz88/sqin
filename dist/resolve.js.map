{"version":3,"sources":["src/resolve.js"],"names":[],"mappings":";;;;;;qBAgBS,OAAO;;;;oBAfD,OAAO;;;;kBACP,IAAI;;;;oBACF,MAAM;;;;sBACN,WAAW;;;;2BACJ,eAAe;;;;AAWvC,SAAS,OAAO,CAAC,aAAgC,EAAE,GAAmB,EAAE;AACpE,QAAI,OAAO,aAAa,KAAK,QAAQ,IAAI,EAAE,QAAQ,IAAI,aAAa,CAAA,AAAC,EACjE,aAAa,GAAG,CAAC,aAAa,CAAC,CAAC;;AAEpC,WAAO,gBAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CACnC,OAAO,CAAC,UAAA,EAAE;eAAI,oBAAK,QAAQ,CAAC,EAAE,CAAC,GAAG,yBAAK,EAAE,CAAC,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC;KAAA,CAAC,CAClE,OAAO,EAAE,CACT,OAAO,0BAAa,CACpB,OAAO,CAAC,UAAA,OAAO;eACZ,gBAAG,UAAU,CAAC,WAAW,CAAC,kBAAG,QAAQ,CAAC,OAAO,EAAE;AAC3C,oBAAQ,EAAE,MAAM;SACnB,CAAC,CAAC,CACF,OAAO,CAAC,UAAA,YAAY;mBAAI,gBAAG,UAAU,CAAC,EAAE,CAAC,WAAW,GAAG,kBAAK,QAAQ,CAAC,OAAO,CAAC,EAAE,YAAY,EAAE,SAAS,GAAG,kBAAK,QAAQ,CAAC,OAAO,CAAC,CAAC;SAAA,CAAC;KAAA,CACrI,CACA,OAAO,CAAC,UAAA,GAAG,EAAI;AACZ,WAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACf,WAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACnB,EAAE,UAAA,CAAC,EAAI;AACJ,eAAO,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC;KAC5C,CAAC,CAAC;CACV","file":"src/resolve.js","sourcesContent":["/* @flow */\r\nimport fs from 'mz/fs';\r\nimport Rx from 'rx';\r\nimport path from 'path';\r\nimport glob from './rx-glob';\r\nimport resolveDeps from './resolveDeps';\r\n\r\ntype WritableStream = {\r\n    write: (data: string | Buffer) => boolean\r\n};\r\n\r\nexport\r\ndefault\r\n\r\nfunction resolve(entryPointIds: string | string[], out: WritableStream) {\r\n    if (typeof entryPointIds !== 'object' || !('length' in entryPointIds))\r\n        entryPointIds = [entryPointIds];\r\n\r\n    return Rx.Observable.from(entryPointIds)\r\n        .flatMap(id => glob.hasMagic(id) ? glob(id) : Rx.Observable.of(id))\r\n        .toArray()\r\n        .flatMap(resolveDeps)\r\n        .flatMap(sqlFile =>\r\n            Rx.Observable.fromPromise(fs.readFile(sqlFile, {\r\n                encoding: 'utf8'\r\n            }))\r\n            .flatMap(fileContents => Rx.Observable.of('-- begin ' + path.basename(sqlFile), fileContents, '-- end ' + path.basename(sqlFile)))\r\n        )\r\n        .forEach(dep => {\r\n            out.write(dep);\r\n            out.write('\\n');\r\n        }, e => {\r\n            console.error(e.stack || e.message || e);\r\n        });\r\n}\r\n"]}